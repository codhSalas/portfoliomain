<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Guide Docker Complet</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: #e4e4e4;
            line-height: 1.6;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(15, 23, 42, 0.8);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        }

        h1 {
            text-align: center;
            color: #60a5fa;
            font-size: 3em;
            margin-bottom: 20px;
            text-shadow: 0 0 20px rgba(96, 165, 250, 0.5);
        }

        .subtitle {
            text-align: center;
            color: #94a3b8;
            font-size: 1.2em;
            margin-bottom: 40px;
        }

        h2 {
            color: #38bdf8;
            font-size: 2em;
            margin-top: 40px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #38bdf8;
        }

        h3 {
            color: #7dd3fc;
            font-size: 1.5em;
            margin-top: 30px;
            margin-bottom: 15px;
        }

        .warning {
            background: rgba(239, 68, 68, 0.1);
            border-left: 4px solid #ef4444;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }

        .tip {
            background: rgba(34, 197, 94, 0.1);
            border-left: 4px solid #22c55e;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }

        .info {
            background: rgba(59, 130, 246, 0.1);
            border-left: 4px solid #3b82f6;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }

        code {
            background: rgba(30, 41, 59, 0.8);
            padding: 3px 8px;
            border-radius: 4px;
            color: #f472b6;
            font-family: 'Courier New', monospace;
        }

        pre {
            background: rgba(15, 23, 42, 0.9);
            padding: 20px;
            border-radius: 10px;
            overflow-x: auto;
            margin: 15px 0;
            border: 1px solid #334155;
        }

        pre code {
            background: none;
            padding: 0;
            color: #a5f3fc;
        }

        ul, ol {
            margin-left: 30px;
            margin-top: 10px;
            margin-bottom: 10px;
        }

        li {
            margin: 8px 0;
        }

        .command-box {
            background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border: 1px solid #475569;
        }

        .command-title {
            color: #fbbf24;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .section {
            margin-bottom: 40px;
        }

        strong {
            color: #fcd34d;
        }

        a {
            color: #60a5fa;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        .toc {
            background: rgba(30, 41, 59, 0.5);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 40px;
        }

        .toc h2 {
            margin-top: 0;
        }

        .toc ul {
            list-style: none;
            margin-left: 0;
        }

        .toc li {
            padding: 5px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üê≥ Guide Docker Complet</h1>
        <p class="subtitle">Ma√Ætrisez Docker de A √É  Z - Base solide pour vos projets</p>

        <div class="toc">
            <h2>üìã Table des mati√®res</h2>
            <ul>
                <li><a href="#concepts">1. Concepts fondamentaux</a></li>
                <li><a href="#installation">2. Installation</a></li>
                <li><a href="#images">3. Gestion des images</a></li>
                <li><a href="#conteneurs">4. Gestion des conteneurs</a></li>
                <li><a href="#dockerfile">5. Cr√©ation d'images (Dockerfile)</a></li>
                <li><a href="#volumes">6. Volumes et persistance</a></li>
                <li><a href="#bonnes-pratiques">7. Bonnes pratiques</a></li>
            </ul>
        </div>

        <div class="section" id="concepts">
            <h2>1. Concepts Fondamentaux</h2>
            
            <h3>üéØ Qu'est-ce que Docker ?</h3>
            <p>Docker est un outil de conteneurisation qui permet d'ex√©cuter des applications de mani√®re isol√©e. Il utilise des fonctionnalit√©s du noyau Linux (namespaces et cgroups) pour cr√©er des environnements isol√©s.</p>

            <div class="info">
                <strong>‚ö†Ô∏è Important :</strong> Docker n√©cessite un noyau Linux. Sur Windows/macOS, il utilise WSL2 ou une VM pour fonctionner.
            </div>

            <h3>üì¶ Les 3 concepts cl√©s</h3>
            
            <div class="command-box">
                <div class="command-title">üñºÔ∏è IMAGE</div>
                <p>Un paquet contenant votre application et toutes ses d√©pendances (code, configuration, biblioth√®ques).</p>
                <ul>
                    <li><strong>Immuable</strong> : une fois cr√©√©e, elle ne peut pas √™tre modifi√©e</li>
                    <li><strong>Compos√©e de couches</strong> : chaque modification cr√©e une nouvelle couche</li>
                    <li>Une application = une image</li>
                </ul>
            </div>

            <div class="command-box">
                <div class="command-title">üì¶ CONTENEUR</div>
                <p>Une instance d'ex√©cution d'une image. C'est l'application qui tourne r√©ellement.</p>
                <ul>
                    <li>L√©ger et isol√© du syst√®me h√¥te</li>
                    <li>Les donn√©es sont <strong>√©ph√©m√®res par d√©faut</strong></li>
                    <li>Peut √™tre d√©marr√©, arr√™t√©, supprim√©</li>
                </ul>
            </div>

            <div class="command-box">
                <div class="command-title">üíæ VOLUME</div>
                <p>Un espace de stockage pour conserver les donn√©es de mani√®re persistante.</p>
                <ul>
                    <li>Situ√© en dehors du conteneur</li>
                    <li>Les donn√©es survivent √† la suppression du conteneur</li>
                    <li>Essentiel pour les bases de donn√©es, logs, etc.</li>
                </ul>
            </div>
        </div>

        <div class="section" id="installation">
            <h2>2. Installation</h2>
            
            <h3>Windows</h3>
            <ol>
                <li>Installer WSL2 (Windows Subsystem for Linux)</li>
                <li>T√©l√©charger Docker Desktop depuis docker.com</li>
                <li>Installer et red√©marrer</li>
            </ol>

            <h3>Linux</h3>
            <pre><code># Installation sur Ubuntu/Debian
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

# Ajouter l'utilisateur au groupe docker
sudo usermod -aG docker $USER</code></pre>

            <h3>V√©rification</h3>
            <pre><code>docker --version
docker info</code></pre>
        </div>

        <div class="section" id="images">
            <h2>3. Gestion des Images</h2>

            <h3>Rechercher une image</h3>
            <pre><code># Rechercher une image
docker search python

# Filtrer par √©toiles et officiel
docker search --filter=stars=100 --filter=is-official=true python</code></pre>

            <h3>T√©l√©charger une image</h3>
            <pre><code># T√©l√©charger la derni√®re version
docker pull python

# T√©l√©charger une version sp√©cifique
docker pull python:3.10

# T√©l√©charger une version slim (all√©g√©e)
docker pull python:3.13-slim</code></pre>

            <div class="tip">
                <strong>üí° Astuce :</strong> Les versions "slim" sont plus l√©g√®res (quelques centaines de Mo vs plusieurs Go).
            </div>

            <h3>Lister les images</h3>
            <pre><code>docker images
# ou
docker image ls</code></pre>

            <h3>Supprimer une image</h3>
            <pre><code># Supprimer une image
docker rmi nom_image

# Forcer la suppression
docker rmi -f nom_image</code></pre>

            <div class="warning">
                <strong>‚ö†Ô∏è Attention :</strong> Vous devez d'abord supprimer les conteneurs qui utilisent l'image.
            </div>

            <h3>Sauvegarder/Restaurer une image</h3>
            <pre><code># Sauvegarder une image dans un fichier .tar
docker save python:3.10 -o image_python310.tar

# Charger une image depuis un fichier
docker load -i image_python310.tar</code></pre>
        </div>

        <div class="section" id="conteneurs">
            <h2>4. Gestion des Conteneurs</h2>

            <h3>Cr√©er et ex√©cuter un conteneur</h3>
            <pre><code># M√©thode rapide (cr√©e, d√©marre et attache)
docker run -it ubuntu

# Avec un nom personnalis√©
docker run -it --name mon_conteneur ubuntu

# En arri√®re-plan (d√©tach√©)
docker run -d --name mon_app nginx

# Avec redirection de port
docker run -d -p 8080:80 nginx</code></pre>

            <div class="info">
                <strong>Options importantes :</strong>
                <ul>
                    <li><code>-i</code> : mode interactif (entr√©e clavier)</li>
                    <li><code>-t</code> : terminal int√©gr√©</li>
                    <li><code>-d</code> : mode d√©tach√© (arri√®re-plan)</li>
                    <li><code>-p</code> : redirection de port (h√¥te:conteneur)</li>
                    <li><code>--name</code> : nom du conteneur</li>
                    <li><code>--rm</code> : supprime le conteneur apr√®s ex√©cution</li>
                </ul>
            </div>

            <h3>Lister les conteneurs</h3>
            <pre><code># Conteneurs actifs uniquement
docker ps

# Tous les conteneurs (actifs et arr√™t√©s)
docker ps -a
# ou
docker container ls -a</code></pre>

            <h3>G√©rer l'ex√©cution</h3>
            <pre><code># D√©marrer un conteneur arr√™t√©
docker start nom_conteneur

# Arr√™ter un conteneur
docker stop nom_conteneur

# Red√©marrer
docker restart nom_conteneur

# Mettre en pause
docker pause nom_conteneur

# Reprendre
docker unpause nom_conteneur</code></pre>

            <h3>Ex√©cuter des commandes dans un conteneur</h3>
            <pre><code># Ex√©cuter une commande
docker exec -it mon_conteneur ls

# Ouvrir un shell
docker exec -it mon_conteneur bash
# ou
docker exec -it mon_conteneur sh</code></pre>

            <h3>Copier des fichiers</h3>
            <pre><code># Du conteneur vers l'h√¥te
docker cp mon_conteneur:/chemin/fichier.txt ./

# De l'h√¥te vers le conteneur
docker cp ./fichier.txt mon_conteneur:/chemin/</code></pre>

            <h3>Afficher les logs</h3>
            <pre><code># Afficher les logs
docker logs mon_conteneur

# Suivre les logs en temps r√©el
docker logs -f mon_conteneur

# Afficher les logs depuis 5 minutes
docker logs --since 5m mon_conteneur</code></pre>

            <h3>Statistiques et inspection</h3>
            <pre><code># Statistiques en temps r√©el
docker stats

# Statistiques ponctuelles
docker stats --no-stream

# Inspecter un conteneur
docker inspect mon_conteneur</code></pre>

            <h3>Supprimer des conteneurs</h3>
            <pre><code># Supprimer un conteneur arr√™t√©
docker rm nom_conteneur

# Forcer la suppression (m√™me en cours d'ex√©cution)
docker rm -f nom_conteneur

# Supprimer tous les conteneurs arr√™t√©s
docker container prune</code></pre>
        </div>

        <div class="section" id="dockerfile">
            <h2>5. Cr√©ation d'Images (Dockerfile)</h2>

            <h3>Structure d'un Dockerfile</h3>
            <pre><code># Image de base
FROM python:3.13-slim

# M√©tadonn√©es
LABEL vendor="monsite.com"
LABEL version="1.0"
LABEL description="Application exemple"

# Variables d'environnement
ENV APP_NAME="MonApp"

# R√©pertoire de travail
WORKDIR /app

# Copier les fichiers
COPY requirements.txt .
COPY . .

# Installer les d√©pendances
RUN pip install --upgrade pip
RUN pip install -r requirements.txt

# Exposer un port
EXPOSE 8000

# Commande d'ex√©cution
CMD ["python", "app.py"]</code></pre>

            <h3>Directives principales</h3>
            
            <div class="command-box">
                <div class="command-title">FROM</div>
                <p>D√©finit l'image de base (obligatoire, premi√®re directive)</p>
                <pre><code>FROM python:3.13-slim</code></pre>
            </div>

            <div class="command-box">
                <div class="command-title">RUN</div>
                <p>Ex√©cute une commande lors de la construction de l'image</p>
                <pre><code>RUN apt-get update && apt-get install -y curl</code></pre>
            </div>

            <div class="command-box">
                <div class="command-title">COPY</div>
                <p>Copie des fichiers depuis l'h√¥te vers l'image</p>
                <pre><code>COPY . /app</code></pre>
            </div>

            <div class="command-box">
                <div class="command-title">WORKDIR</div>
                <p>D√©finit le r√©pertoire de travail</p>
                <pre><code>WORKDIR /app</code></pre>
            </div>

            <div class="command-box">
                <div class="command-title">CMD</div>
                <p>Commande ex√©cut√©e au d√©marrage du conteneur</p>
                <pre><code>CMD ["python", "app.py"]</code></pre>
            </div>

            <div class="command-box">
                <div class="command-title">EXPOSE</div>
                <p>Indique les ports que le conteneur √©coute</p>
                <pre><code>EXPOSE 8000</code></pre>
            </div>

            <h3>Construire une image</h3>
            <pre><code># Construction basique
docker build -t mon_image .

# Avec un tag sp√©cifique
docker build -t mon_image:1.0 .

# Depuis un autre r√©pertoire
docker build -t mon_image /chemin/vers/dockerfile</code></pre>

            <div class="tip">
                <strong>üí° Bonnes pratiques :</strong>
                <ul>
                    <li>Utiliser des images de base slim/alpine</li>
                    <li>Regrouper les commandes RUN pour r√©duire les couches</li>
                    <li>Copier les fichiers de d√©pendances avant le code (cache)</li>
                    <li>Nettoyer les fichiers temporaires dans la m√™me commande RUN</li>
                </ul>
            </div>

            <h3>Exemple complet : Application Python</h3>
            <pre><code># Dockerfile
FROM python:3.13-slim

LABEL maintainer="vous@exemple.com"

WORKDIR /app

# Copier et installer les d√©pendances
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copier le code de l'application
COPY . .

# Port expos√©
EXPOSE 5000

# Commande de d√©marrage
CMD ["python", "app.py"]</code></pre>

            <pre><code># Construire et ex√©cuter
docker build -t mon_app .
docker run -d -p 5000:5000 --name mon_conteneur mon_app</code></pre>
        </div>

        <div class="section" id="volumes">
            <h2>6. Volumes et Persistance</h2>

            <h3>Pourquoi les volumes ?</h3>
            <p>Par d√©faut, les donn√©es dans un conteneur sont <strong>√©ph√©m√®res</strong> : elles disparaissent quand le conteneur est supprim√©.</p>

            <div class="warning">
                <strong>‚ö†Ô∏è Sans volume :</strong> Installation de logiciels, cr√©ation de fichiers = tout est perdu au red√©marrage !
            </div>

            <h3>Cr√©er et g√©rer des volumes</h3>
            <pre><code># Cr√©er un volume
docker volume create mon_volume

# Lister les volumes
docker volume ls

# Inspecter un volume
docker volume inspect mon_volume

# Supprimer un volume
docker volume rm mon_volume

# Supprimer les volumes non utilis√©s
docker volume prune</code></pre>

            <h3>Utiliser un volume avec un conteneur</h3>
            <pre><code># Attacher un volume lors de la cr√©ation
docker run -it -v mon_volume:/data --name test ubuntu

# Le volume sera mont√© dans /data du conteneur
# Tout ce qui est √©crit dans /data sera persistant</code></pre>

            <div class="info">
                <strong>Syntaxe :</strong> <code>-v nom_volume:chemin_conteneur</code>
            </div>

            <h3>Partage de fichiers (bind mount)</h3>
            <p>Pour partager un r√©pertoire entre l'h√¥te et le conteneur :</p>

            <pre><code># Syntaxe compl√®te avec --mount
docker run -it \
  --mount type=bind,source=/chemin/hote,target=/data \
  --name test ubuntu

# Syntaxe courte avec -v
docker run -it -v /chemin/hote:/data --name test ubuntu

# En lecture seule
docker run -it -v /chemin/hote:/data:ro --name test ubuntu</code></pre>

            <div class="tip">
                <strong>üí° Cas d'usage :</strong>
                <ul>
                    <li><strong>Volume</strong> : pour les donn√©es d'application (bases de donn√©es, logs)</li>
                    <li><strong>Bind mount</strong> : pour le d√©veloppement (code source partag√©)</li>
                </ul>
            </div>

            <h3>Exemple pratique : Base de donn√©es MySQL</h3>
            <pre><code># Cr√©er un volume pour MySQL
docker volume create mysql_data

# Lancer MySQL avec persistance
docker run -d \
  --name mysql_db \
  -e MYSQL_ROOT_PASSWORD=motdepasse \
  -v mysql_data:/var/lib/mysql \
  -p 3306:3306 \
  mysql:8.0

# Les donn√©es MySQL sont maintenant persistantes !</code></pre>
        </div>

        <div class="section" id="bonnes-pratiques">
            <h2>7. Bonnes Pratiques et Remarques</h2>

            <h3>üéØ Commandes essentielles √† conna√Ætre</h3>
            <pre><code># Aide sur une commande
docker COMMANDE --help

# Version et informations
docker --version
docker info

# Nettoyage complet
docker system prune -a    # Supprime tout ce qui n'est pas utilis√©</code></pre>

            <h3>‚úÖ Workflow recommand√© pour d√©buter</h3>
            <ol>
                <li><strong>Tester avec des images existantes</strong> : Commencez par <code>docker run</code> avec des images officielles</li>
                <li><strong>Comprendre les volumes</strong> : Exp√©rimentez avec la persistance des donn√©es</li>
                <li><strong>Cr√©er vos propres images</strong> : √âcrivez des Dockerfiles simples</li>
                <li><strong>Construire des projets</strong> : Combinez images, volumes et r√©seaux</li>
            </ol>

            <h3>‚ö†Ô∏è Erreurs courantes √† √©viter</h3>
            
            <div class="warning">
                <strong>1. Oublier de supprimer les conteneurs avant les images</strong>
                <pre><code># ‚ùå Erreur
docker rmi mon_image

# ‚úÖ Correct
docker rm mon_conteneur
docker rmi mon_image</code></pre>
            </div>

            <div class="warning">
                <strong>2. Ne pas utiliser de volumes pour les donn√©es importantes</strong>
                <p>Base de donn√©es, fichiers upload√©s = <strong>toujours utiliser un volume</strong></p>
            </div>

            <div class="warning">
                <strong>3. Confondre nom d'image et nom de conteneur</strong>
                <ul>
                    <li>Image = le mod√®le (ex: <code>python:3.10</code>)</li>
                    <li>Conteneur = l'instance qui tourne (ex: <code>mon_app</code>)</li>
                </ul>
            </div>

            <h3>üìö Projets pour pratiquer</h3>
            
            <div class="command-box">
                <div class="command-title">Projet 1 : Application Python simple</div>
                <p>Cr√©ez un script Python qui affiche "Hello Docker", cr√©ez un Dockerfile, et ex√©cutez-le.</p>
            </div>

            <div class="command-box">
                <div class="command-title">Projet 2 : Site web statique</div>
                <p>Utilisez nginx pour servir un site HTML simple avec un volume pour le code.</p>
            </div>

            <div class="command-box">
                <div class="command-title">Projet 3 : Application avec base de donn√©es</div>
                <p>Cr√©ez une app Python + MySQL avec volumes pour la persistance.</p>
            </div>

            <h3>üîó Ressources utiles</h3>
            <ul>
                <li><a href="https://docs.docker.com" target="_blank">Documentation officielle Docker</a></li>
                <li><a href="https://hub.docker.com" target="_blank">Docker Hub</a> - Registre d'images</li>
                <li>Commande <code>docker --help</code> - Toujours disponible !</li>
            </ul>

            <h3>üí™ Prochaines √©tapes</h3>
            <p>Une fois ces bases ma√Ætris√©es, vous pourrez explorer :</p>
            <ul>
                <li><strong>Docker Compose</strong> : orchestrer plusieurs conteneurs</li>
                <li><strong>R√©seaux Docker</strong> : faire communiquer les conteneurs</li>
                <li><strong>Multi-stage builds</strong> : optimiser vos images</li>
                <li><strong>Docker Swarm / Kubernetes</strong> : d√©ploiement √† grande √©chelle</li>
            </ul>

            <div class="tip">
                <strong>üéì Conseil final :</strong> La meilleure fa√ßon d'apprendre Docker est de <strong>pratiquer</strong>. Cr√©ez des petits projets, cassez des choses, r√©parez-les. C'est comme √ßa qu'on progresse !
            </div>
        </div>

        <div style="text-align: center; margin-top: 60px; padding-top: 20px; border-top: 1px solid #334155; color: #64748b;">
            <p>üê≥ Bon apprentissage avec Docker !</p>
            <p style="font-size: 0.9em; margin-top: 10px;">Guide cr√©√© √† partir des vid√©os de formation Docker</p>
        </div>
    </div>
</body>
</html>